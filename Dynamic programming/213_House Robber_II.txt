class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 0)
        {
            return 0;
        }
        if (n <= 3)
        {
            return *max_element(nums.begin(),nums.end());
        }
        vector<int> dp1(n,0); //rob for first hause
        vector<int> dp2(n,0); //rob not for first hause
        dp1[0] = nums[0];
        dp1[1] = nums[0];
        dp2[0] = 0;
        dp2[1] = nums[1];
        for (int i = 2; i < n; ++i)
        {
            dp1[i] = max(dp1[i-2]+nums[i],dp1[i-1]);
            dp2[i] = max(dp2[i-2]+nums[i],dp2[i-1]);
            if (i == n - 1)
            {
                dp1[i] =  dp1[i-1];
                dp2[i] =  max(dp2[i-2] + nums[i], dp2[i-1]);
            }
        }
        return max(dp1[n-1],dp2[n-1]);

    }
};