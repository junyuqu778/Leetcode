class Solution {
public:
    bool wordPattern(string pattern, string str) {
        vector<string> result;  // split the str to vector for string
        istringstream iss(str);
        for (string w; iss >> w; )
        {
            result.push_back(w);
        }
        if(pattern.size()!=result.size())
            return false;

        unordered_map<char,int> sHash;
        unordered_map<string,int> tHash;
        for(int i =0;i<result.size();i++){
            if(sHash.count(pattern[i])&&tHash.count(result[i])){
                if(sHash[pattern[i]]!=tHash[result[i]])
                    return false;
            }
            else if(sHash.count(pattern[i]) || tHash.count(result[i]))
                return false;
            else{
                sHash[pattern[i]]=i;
                tHash[result[i]]=i;
            }
        }
        return true;
    }
};